@PART[RadialOreTank]
{
	%MODULE[ModuleInventoryPart]
    {
        InventorySlots = 2
        packedVolumeLimit = 70
    }
}
@PART[SmallTank]
{
	%MODULE[ModuleInventoryPart]
    {
        InventorySlots = 2
        packedVolumeLimit = 100
    }
}
@PART[LargeTank]
{
	%MODULE[ModuleInventoryPart]
    {
        InventorySlots = 2
        packedVolumeLimit = 200
    }
}

@PART[*]:HAS[@RESOURCE[Ore]]:NEEDS[OreToParts]
{
	%MODULE[OreToParts]
    {
        // lists
		partList = evaRepairKit,evaScienceKit,HighGainAntenna5,solarPanels4,evaJetpack,evaCylinder
		//default values, don't touch
		craftPart = evaRepairKit
        craftPartName = Repair Kit
		cost = 15
        // syntax: resources = Resource1|Ratio,Resource2|Ratio,...
		resources = Ore|1

    }
}

@PART[*]:HAS[@RESOURCE[Ore]]:NEEDS[OreToParts]
{
    %MODULE[ModuleScrap]
    {
        name = ModuleScrap
        // always  = destroys the part even if all resources are full
        // partial = fills as much resources as possible and destroys the part, blocks if all resources are full
        // block   = prevents part from being destroyed if resources are about to be full
        resources = Ore|0.5
        scrapMode = block
        
    }
}

@PART[*]:HAS[@RESOURCE[Ore]]:NEEDS[OreToParts]
{
    %MODULE[ModuleEvaRefueler]
    {
        name = ModuleEvaRefueler
        sourceResource = EVA Propellant
        resources = Ore|1
    }
}

@PART[*]:HAS[@MODULE[ModuleCommand],@RESOURCE[MonoPropellant]]:NEEDS[OreToParts]
{
    %MODULE[ModuleEvaRefueler]
    {
        name = ModuleEvaRefueler
        sourceResource = EVA Propellant
        resources = MonoPropellant|1
    }
}